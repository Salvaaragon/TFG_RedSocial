<?php

namespace AppBundle\Repository;

/**
 * GameGroupRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GameGroupRepository extends \Doctrine\ORM\EntityRepository
{
    public function getNumGroupsUser($id_user) {
        return $query = $this->getEntityManager()
            ->createQuery(
                'SELECT count(g.id) FROM AppBundle:GameGroup g 
                WHERE g.user = :id_user and g.isActive = 1'
            )->setParameter('id_user', $id_user)
            ->getSingleScalarResult()
        ;
    }

    public function getAllGroupsActiveNotPlaying() {
        $query = $this->getEntityManager()
                ->createQueryBuilder();

        $now_date = new \Datetime('now');

        $query->select('g')
                ->from('AppBundle:GameGroup', 'g')
                ->where('g.isActive = 1')
                ->andWhere('g.datetime > :now_date')
                ->orderBy('g.datetime', 'ASC')
                ->setParameter('now_date', $now_date);

        return $query->getQuery()->getResult();
    }

    public function getAllGroupsActivePlatformNotPlaying($id_platform) {
        $query = $this->getEntityManager()
                ->createQueryBuilder();

        $now_date = new \Datetime('now');

        $query->select('g')
                ->from('AppBundle:GameGroup', 'g')
                ->where('g.isActive = 1')
                ->andWhere('g.platform = :id_platform')
                ->andWhere('g.datetime > :now_date')
                ->orderBy('g.datetime', 'ASC')
                ->setParameters(array('id_platform' => $id_platform,'now_date' => $now_date));

        return $query->getQuery()->getResult();
    }

    public function getGroupsPlatformUserpart($id_platform, $id_user) {
        $query = $this->getEntityManager()
                ->createQueryBuilder();

        $query->select('g, p')
              ->from('AppBundle:GameGroup', 'g')
              ->join('g.participants', 'p')
              ->where('g.platform = :id_platform')
              ->andWhere('g.isActive = 1')
              ->andWhere('p.id = :id_user')
              ->orderBy('g.datetime', 'ASC')
              ->setParameters(array('id_platform' => $id_platform, 'id_user' => $id_user));

        return $query->getQuery()->getResult();
    }

    public function getGroupsUserpart($id_user) {
        $query = $this->getEntityManager()
                ->createQueryBuilder();

        $query->select('g, p')
              ->from('AppBundle:GameGroup', 'g')
              ->join('g.participants', 'p')
              ->where('g.isActive = 1')
              ->andWhere('p.id = :id_user')
              ->orderBy('g.datetime', 'ASC')
              ->setParameter('id_user', $id_user);

        return $query->getQuery()->getResult();
    }

    public function getAllGroupsPlatformUser($id_platform, $id_user) {
        $query = $this->getEntityManager()
        ->createQueryBuilder();

        $query->select('g')
            ->from('AppBundle:GameGroup', 'g')
            ->where('g.platform = :id_platform')
            ->andWhere('g.isActive = 0')
            ->andWhere('g.user = :id_user')
            ->orderBy('g.datetime', 'ASC')
            ->setParameters(array('id_platform' => $id_platform, 'id_user' => $id_user));

        return $query->getQuery()->getResult();
    }

    public function getAllGroupsUser($id_user) {
        $query = $this->getEntityManager()
        ->createQueryBuilder();

        $query->select('g')
            ->from('AppBundle:GameGroup', 'g')
            ->where('g.isActive = 0')
            ->andWhere('g.user = :id_user')
            ->orderBy('g.datetime', 'ASC')
            ->setParameter('id_user', $id_user);

        return $query->getQuery()->getResult();
    }

    public function getAllPartPlatformUser($id_platform, $id_user) {
        $query = $this->getEntityManager()
        ->createQueryBuilder();

        $query->select('g, p')
            ->from('AppBundle:GameGroup', 'g')
            ->join('g.participants', 'p')
            ->where('g.platform = :id_platform')
            ->andWhere('g.isActive = 0')
            ->andWhere('p.id = :id_user')
            ->orderBy('g.datetime', 'ASC')
            ->setParameters(array('id_platform' => $id_platform, 'id_user' => $id_user));

        return $query->getQuery()->getResult();
    }

    public function getAllPartUser($id_user) {
        $query = $this->getEntityManager()
        ->createQueryBuilder();

        $query->select('g, p')
            ->from('AppBundle:GameGroup', 'g')
            ->join('g.participants', 'p')
            ->where('g.isActive = 0')
            ->andWhere('p.id = :id_user')
            ->orderBy('g.datetime', 'ASC')
            ->setParameter('id_user', $id_user);

        return $query->getQuery()->getResult();
    }

    public function getAllGroupsPlayingPlatform($id_platform) {
        $query = $this->getEntityManager()
        ->createQueryBuilder();

        $now_date = new \Datetime('now');

        $query->select('g')
            ->from('AppBundle:GameGroup', 'g')
            ->where('g.platform = :id_platform')
            ->andWhere('g.isActive = 1')
            ->andWhere('g.datetime <= :now_date')
            ->orderBy('g.datetime', 'ASC')
            ->setParameters(array('id_platform' => $id_platform, 'now_date' => $now_date));

        return $query->getQuery()->getResult();
    }

    public function getAllGroupsPlaying() {
        $query = $this->getEntityManager()
        ->createQueryBuilder();

        $now_date = new \Datetime('now');

        $query->select('g')
            ->from('AppBundle:GameGroup', 'g')
            ->where('g.isActive = 1')
            ->andWhere('g.datetime <= :now_date')
            ->orderBy('g.datetime', 'ASC')
            ->setParameters(array('now_date' => $now_date));

        return $query->getQuery()->getResult();
    }
}
